using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Xml.Linq;
using EntityCreator.Columns;
using Microsoft.Extensions.Logging;

namespace EntityCreator;

public class Entity : SchemaItem {

	private readonly Template _tpl;
	private readonly List<BaseColumn> _columns;
	ILogger<Entity> _logger;
	public override string ManagerName => "EntitySchemaManager";
	private const string TemplateName = "BaseEntity";
	public Entity(Template tpl, ILoggerFactory loggerFactory) : base(loggerFactory) {
		_tpl = tpl;
		_columns = [];
		UId = Guid.NewGuid();
		_logger = LoggerFactory.CreateLogger<Entity>();
	}

	public void AddColumn(string columnName, DataValueType.ColumnType columnType){
		BaseColumn? column = ColumnFactory.CreateColumn(columnType, UId, columnName, PackageId);
		if(column is not null) {
			_columns.Add(column);
			_logger.LogInformation(new EventId(201, "ColumnAdded"),
				"Column \u001b[1m{columnName}\u001b[0m added to entity \u001b[1m{Name}\u001b[0m as \u001b[1m{columnType}\u001b[0m", column.Name, Name, columnType);
		} else {
			_logger.LogError("Column {columnName} with type {columnType} could not be added.",columnName, columnType);
		}
	}
	
	public string GenerateMetadataText(){
		string tplContent = _tpl.GetContent(TemplateName);
		string entityMetadata = tplContent
								.Replace("{{schemaUId}}", UId.ToString(), StringComparison.InvariantCulture)
								.Replace("{{name}}", Name, StringComparison.InvariantCulture)
								.Replace("{{packageUId}}", PackageId.ToString(), StringComparison.InvariantCulture)
								.Replace("{{displayColumnId}}", _columns.First().Uid.ToString(), StringComparison.InvariantCulture)
								.Replace("{{columns}}", GetColumnsMetadataText(), StringComparison.InvariantCulture)
								.Replace("{{columnsUIds}}", GetColumnUIds(), StringComparison.InvariantCulture);
		return entityMetadata;
	}
	
	private string GetColumnsMetadataText(){
		StringBuilder sb = new ();
		_columns.ForEach(c => sb
							.Append("+ MetaData.Schema.D2 ")
							.AppendLine(c.ToJson()));
		return sb.ToString().TrimEnd();
	}
	
	private string GetColumnUIds(){
		if(_columns.Count == 0) {
			return string.Empty;
		}
		string[] ids= _columns.Select(c => c.Uid.ToString()).ToArray();
		for(int i = 0; i < ids.Length; i++){
			ids[i] = $"\"{ids[i]}\"";
		}
		string escapedIds =  ids.Aggregate((a, b) => $"{a}, {b}");
		return $", {escapedIds}";
	}

	public string GenerateDescriptorText(){
		Descriptor descriptor = new (
			UId: UId,
			Name: Name,
			ModifiedOnUtc: $"/Date({new DateTimeOffset(DateTime.UtcNow).ToUnixTimeMilliseconds()})/",
			Parent: new Parent(Guid.Parse("1bab9dcf-17d5-49f8-9536-8e0064f1dce0"), TemplateName),
			ManagerName: ManagerName,
			Caption: Name,
			DependsOn: []
			);
		
		DescriptorWrapper wrapper = new (descriptor);
		return JsonSerializer.Serialize<DescriptorWrapper>(
			wrapper, AppJsonSerializerContext.Default.DescriptorWrapper);
	}
	
	public string GeneratePropertiesText(){
		Properties properties = new (
			AdministratedByColumns: "False",
			AdministratedByOperations: "False",
			AdministratedByRecords: "False",
			CreatedInVersion: "7.7.0.0",
			IsSSPAvailable: "False",
			IsTrackChangesInDB: "False",
			IsVirtual: "False",
			UseLiveEditing: "True"
		);
		PropertiesWrapper propertiesWrapper = new (properties);
		return JsonSerializer.Serialize<PropertiesWrapper>(
			propertiesWrapper, AppJsonSerializerContext.Default.PropertiesWrapper);
	}

	public string GenerateResourceXml(){
		// Create the XML structure
		XDocument doc = new (
			new XDeclaration("1.0", "utf-8", null),
			new XElement("Resources",
				new XAttribute("Culture", "en-US"),
				new XElement("Group",
					new XAttribute("Type", "String"),
					new XElement("Items",
						new XElement("Item",
							new XAttribute("Name", "Caption"),
							new XAttribute("Value", Name)
						),
						new XElement("Item",
							new XAttribute("Name", "Description"),
							new XAttribute("Value", $"Autogenerated with {typeof(Program).Assembly.GetName().Name}")
						),
						// Generate Items for each column name
						_columns.Select(column => 
							new XElement("Item",
								new XAttribute("Name", $"Columns.{column.Name}.Caption"),
								new XAttribute("Value", column.Name)
							))
					)
				)
			));

		// Convert to string with proper formatting
		return doc.Declaration + Environment.NewLine + doc;
	}
}

